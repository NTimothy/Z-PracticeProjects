# Advent of Code 2019
# Day 5: Sunny with a Chance of Asteroids
# https://adventofcode.com/2019/day/5

diagnostic_program = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,89,49,225,1102,35,88,224,101,-3080,224,224,4,224,102,
                      8,223,223,1001,224,3,224,1,223,224,223,1101,25,33,224,1001,224,-58,224,4,224,102,8,223,223,101,
                      5,224,224,1,223,224,223,1102,78,23,225,1,165,169,224,101,-80,224,224,4,224,102,8,223,223,101,7,
                      224,224,1,224,223,223,101,55,173,224,1001,224,-65,224,4,224,1002,223,8,223,1001,224,1,224,1,223,
                      224,223,2,161,14,224,101,-3528,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1002,61,
                      54,224,1001,224,-4212,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,14,71,225,1101,85,
                      17,225,1102,72,50,225,1102,9,69,225,1102,71,53,225,1101,10,27,225,1001,158,34,224,101,-51,224,224,
                      4,224,102,8,223,223,101,6,224,224,1,223,224,223,102,9,154,224,101,-639,224,224,4,224,102,8,223,
                      223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,
                      247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,
                      1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,
                      0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,
                      226,224,102,2,223,223,1006,224,329,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,344,
                      1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,108,226,677,224,1002,223,
                      2,223,1005,224,374,1001,223,1,223,107,226,677,224,102,2,223,223,1006,224,389,101,1,223,223,1107,
                      226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,
                      419,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1108,677,226,224,
                      1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,101,1,223,
                      223,7,226,677,224,102,2,223,223,1006,224,479,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,
                      224,494,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,509,1001,223,1,223,1108,226,226,
                      224,1002,223,2,223,1006,224,524,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,539,1001,223,
                      1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,107,677,677,224,102,2,223,223,1006,
                      224,569,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,584,1001,223,1,223,8,677,226,224,
                      1002,223,2,223,1005,224,599,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,614,101,1,223,
                      223,108,677,677,224,102,2,223,223,1005,224,629,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,
                      224,644,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,1007,226,677,224,
                      102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226]
class Instructions:
    @staticmethod
    def find_opcode(instr):
        opcode = int(instr % 100)
        return opcode

    @staticmethod
    def find_step(opcode):
        if opcode == 1 or opcode == 2:
            return 4
        elif opcode == 3 or opcode == 4:
            return 2
        elif opcode == 99:
            return 0
        else:
            print("Invalid Opcode")

    @staticmethod
    def find_mode(param):
        mode = int((param / 100) % 10)
        mode1 = int((param / 100) % 10)  # Mode 1, 100 place
        mode2 = int((param / 1000) % 10)  # Mode 2, 1000 place
        return mode, mode1, mode2

    @staticmethod
    def opcode1(x, y):
        sum = x + y
        return sum

    @staticmethod
    def opcode2(x, y):
        product = x * y
        return product

    @staticmethod
    def execute(opcode, param1, param2):
        if opcode == 1:
            _z = Instructions.opcode1(param1, param2)
        elif opcode == 2:
            _z = Instructions.opcode2(param1, param2)
        return _z

def computer(program):
    z = program
    i=0
    while i <= len(z):
        opcode = Instructions.find_opcode(z[i])
        if opcode == 99:
            print("Program Finished.")
            break
        j = Instructions.find_step(opcode)
        mode, mode1, mode2 = "-1", "-1", "-1"
        param, param1, param2 = "-1", "-1", "-1"
        if opcode == 1 or opcode == 2:
            mode1 = Instructions.find_mode(z[i])[1]
            mode2 = Instructions.find_mode(z[i])[2]
        elif opcode == 3 or opcode == 4:
            mode = Instructions.find_mode(z[i])[0]


        if mode == "-1":
            if mode1 == 0:
                param1 = z[z[i+1]]
            elif mode1 == 1:
                param1 = z[i+1]
            if mode2 == 0:
                param2 = z[z[i+2]]
            elif mode2 == 1:
                param2 = z[i+2]
        else:
            if mode == 0:
                param = z[z[i+1]]
            else:
                param = z[i+1]

        if opcode == 3:
            z[z[i+1]] = int(input("Provide System ID;"))
        elif opcode == 4:
            print(param)
        else:
            z[z[i+3]] = Instructions.execute(opcode, param1, param2)
        i += j

computer(diagnostic_program)

# Ans: 7839346
