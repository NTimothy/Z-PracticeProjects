# Advent of Code 2019
# Day 4: Secure Container
# https://adventofcode.com/2019/day/4
# Puzzle input 240298 - 784956

# Returns True if contains 6 digits only
def digits(x):
    a = str(x)
    if not a.isdigit:
        return False
    digit = 0
    for i in a:
        digit +=1
    if digit ==6:
        return True
    else:
        return False

# Returns true if within ranges a,b
def wrange(x,a,b):
    if a <= x <= b:
        return True
    else:
        return False

# Returns True if contains matching adjacent digits
def double(x):
    a = str(x)
    b = []
    b.append(a)
    i = 0
    ans = False
    while i <= 5:
        try:
            if a[i] == a[i+1]:
                ans = True
                break
            else:
                i += 1
        except IndexError:
            break
    return ans

# Returns True if adjacent digits are never decreasing
def increasing(x):
    a = str(x)
    b = []
    b.append(a)
    i = 0
    ans = True
    while i <= 5:
        try:
            if int(a[i+1]) < int(a[i]):
                return False
            else:
                i += 1
                continue
        except IndexError:
            break
    return ans

# def nogroups(x):
#     return ans
# Place holder for Part 2

while True:
    try:
        # a = int(input("What is the minimum number?"))
        # b = int(input("What is the highest number?"))
        a = 240298
        b = 784956
        break
    except:
        print("Not an acceptable number.")
        continue

count = 0
# count2 = 0
for i in range(a,b):
    cond1 = digits(i)
    cond2 = wrange(i,a,b)
    cond3 = double(i)
    cond4 = increasing(i)
    if cond1 and cond2 and cond3 and cond4:
        count += 1
        # cond5 = nogroups(i)
        # if cond5:
        #     print(count2)
        #     count2 += 1

print("\n", count, "number of possible passwords within Part 1 Criteria.")
# print("\n", count2, "number of possible passwords within Part 2 Criteria.")
